﻿@{
    ViewData["Title"] = "Pictures";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section css{


    <style type="text/css">
        .table_style {
            overflow: auto;
            max-width: 150px;
            text-align: center;
        }

        div.dataTables_wrapper div.dataTables_length select {
            width: 50px !important;
        }

        div.dataTables_wrapper div.dataTables_length label {
            margin-left: 10px !important;
            margin-top: 13px !important;
        }

        div.dataTables_wrapper div.dataTables_info {
            margin-left: 10px !important;
        }



        div.dataTables_wrapper div.dataTables_filter input {
            margin-right: 10px !important;
            margin-top: 13px !important;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 2px !important
        }

        div.dataTables_wrapper div.dataTables_paginate {
            margin-right: 10px !important
        }

        div.dataTables_wrapper div.dataTables_length select {
            width: auto;
            display: flex !important;
        }

        .dataTables_filter {
            padding-top:17px !important;
        } 
    </style>
}

<div class="card">
    <div class="card-header">
        <div class="row text-center">
            <h3 class="page-title col-sm-10">Resimler</h3>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-4">
        <div class="page-content">
            <div class="card">
                <div class="table-responsive">
                    <table id="user_table" class="table table-striped table-bordered dt-responsive nowrap" style="vertical-align:middle; width:100%;">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Kullanıcı</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="card-body">
            </div>
        </div>
    </div><!--end User Table-->
    <div class="col-8">
        <div class="page-content">
            <div class="card">
                <div class="table-responsive p-2">
                    <table id="picture_table" class="table table-striped table-bordered dt-responsive nowrap" style="vertical-align:middle; width:100%;">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Url</th>
                                <th>Bilgi</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="card-body">
            </div>

        </div>
    </div><!--end Picture Table-->
</div><!--end User and Picture Tables-->

@section scripts {
    <script type="text/javascript">

        var userTablo = null;
        var pictureTablo = null;

        $((_$) => {
            showUsers();
        });

        var showUsers = () => {
            if (userTablo == null)
                userTablo = $('#user_table').DataTable({
                    language: { url: '../dil.json' },
                    processing: true,
                    serverSide: true,
                    paging: true,
                    filter: true,
                    scrollCollapse: true,
                    orderMulti: true,
                    order: [[1, "asc"]],
                    ajax: {
                        url: '@Url.Action("ShowUsers", "Users")',
                        type: "POST",
                        datatype: "json"
                    },
                    createdRow: function (row, data, dataIndex) {
                    },
                    columnDefs: [{ "defaultContent": "-", "targets": "_all" }],
                    columns: [
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.Id;
                            }, "name": "Id"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.UserName + ' ' + row.Surname;
                            }, "name": "UserName",
                        },
                      
                    ],
                    fixedColumns: true,
                    scrollCollapse: true,
                    initComplete: function (settings, json) {
                        $('#user_table_filter input').unbind();
                        $('#user_table_filter input').bind('keyup', function (e) {
                            if (e.keyCode == 13) {
                                userTablo.search(this.value).draw();
                            }
                        });

                        $('.dataTables_scrollBody').removeAttr('style').css({
                            'position': 'relative',
                            'overflow-y': 'auto',
                            'overflow-x': 'auto',
                            'width': '100%',
                            'max-height': ((window.innerHeight / 2) + 120) + 'px'
                        });

                    }

                })

            //Seçili satırın tarifelerini göster
            var table1 = $('#user_table').DataTable();

            $('#user_table tbody').on('click', 'tr', function () {
                var data = table1.row(this).data();
                javascript: showPicture(data.Id);

                $('#user_table tbody tr').css("background-color", "#ffffff");
                $('#user_table tbody tr').css("color", "#000000");


                $(this).css("background-color", "#ffb822");
                $(this).css("color", "#ffffff");

            })
        }

        var showPicture = (_sID) => {
            sessionStorage.setItem('selectId', _sID);

            if (pictureTablo == null)
                pictureTablo = $('#picture_table').DataTable({
                    language: { url: '../dil.json' },
                    processing: true,
                    serverSide: true,
                    paging: true,
                    filter: true,
                    orderMulti: true,
                    order: [[1, 'asc']],
                    ajax: {
                        url: '@Url.Action("ShowPicture", "Pictures")',
                        type: "POST",
                        datatype: "json",
                        data: function (d) {
                            d.sId = sessionStorage.getItem('selectId');
                        }
                    },
                    createdRow: function (row, data, dataIndex) {

                    },
                    columnDefs: [{ "defaultContent": "-", "targets": "_all" }],
                    columns: [
                        {
                            "render": (data, type, row) => {
                                return row.Id;
                            }, "name": "Id"

                        },
                        {
                            "render": (data, type, row) => {
                                return row.Url;
                            }, "name": "Url"
                        },
                        {
                            "render": (data, type, row) => {
                                return row.Text;
                            }, "name": "Text"
                        },
                        {
                            "render": function (data, type, row) {
                                return `<button type="button" id="delete" class="btn btn btn-outline-dark pt-2" onclick="javascript:deletePicture(${row.Id})"><i class="mdi mdi-trash-can-outline""></i></button>`;

                            }, "name": "Id"
                        }
                    ],
                    fixedColumns: true,
                    scrollCollapse: true,
                    initComplete: function (settings, json) {
                        $('#picture_table input').unbind();
                        $('#picture_table input').bind('keyup', function (e) {
                            if (e.keyCode == 13) {
                                pictureTablo.search(this.value).draw();
                            }
                        });

                        $('.dataTables_scrollBody').removeAttr('style').css({
                            'position': 'relative',
                            'overflow-y': 'auto',
                            'overflow-x': 'hidden',
                            'width': '100%',
                            'max-height': ((window.innerHeight / 2) + 120) + 'px'
                        });
                    }
                })
            else {pictureTablo.ajax.reload();}
        }


        var deletePicture = (delId) => {
            Swal.fire({
                title: 'Silmek istediğinize emin misiniz?',
                icon: 'question',
                showCancelButton: true,
                cancelButtonText: 'Hayır',
                confirmButtonColor: '#4a804d',
                cancelButtonColor: '#b22222',
                confirmButtonText: 'Evet'
            })
                .then((result) => {

                    if (result.value == true) {
                        $.getJSON('@Url.Action("DeletePicture","Pictures")', { pr: delId }, (d, s) => {
                            if (s === "success") {

                                if (d.Status == true) {
                                    pictureTablo.ajax.reload();
                                    const Toast = Swal.mixin({
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000,
                                        timerProgressBar: true,
                                        didOpen: (toast) => {
                                            toast.addEventListener('mouseenter', Swal.stopTimer)
                                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                                        }
                                    })

                                    Toast.fire({
                                        icon: 'success',
                                        title: 'Silme işlemi başarıyla gerçekleşti.'
                                    })
                                } else {
                                    const Toast = Swal.mixin({
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000,
                                        timerProgressBar: true,
                                        didOpen: (toast) => {
                                            toast.addEventListener('mouseenter', Swal.stopTimer)
                                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                                        }
                                    })

                                    Toast.fire({
                                        icon: 'success',
                                        title: 'Ekleme işlemi gerçekleşemedi.'
                                    })
                                }
                            }
                            if (pictureTablo != null)
                                pictureTablo.ajax.reload();
                        });

                    }
                });
        }
    </script>
    }