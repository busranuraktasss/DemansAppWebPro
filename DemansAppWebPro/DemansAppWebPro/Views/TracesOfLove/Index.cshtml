﻿@{
    ViewData["Title"] = "TracesOfLove";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section css{

    <style type="text/css">
        .table_style {
            overflow: auto;
            max-width: 150px;
            text-align: center;
        }

        div.dataTables_wrapper div.dataTables_length select {
            width: 50px !important;
        }

        div.dataTables_wrapper div.dataTables_length label {
            margin-left: 10px !important;
            margin-top: 13px !important;
        }

        div.dataTables_wrapper div.dataTables_info {
            margin-left: 10px !important;
        }



        div.dataTables_wrapper div.dataTables_filter input {
            margin-right: 10px !important;
            margin-top: 13px !important;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 2px !important
        }

        div.dataTables_wrapper div.dataTables_paginate {
            margin-right: 10px !important
        }

        .map {
            margin-top: 35px !important;
        }
    </style>
}

<div class="card">
    <div class="card-header">
        <div class="row text-center">
            <h3 class="page-title col-sm-10">Sevgi İzi</h3>
            <button type="button" class="btn btn btn-outline-dark col-sm-2 align-self-end" data-bs-toggle="modal" onclick="showModal()">Sevgiİzi Ekle</button>
        </div>
    </div>
</div>
<div class="card">
    <div class="table-responsive">
        <table id="traceOfLove_table" class="table table-striped table-bordered dt-responsive nowrap" style="vertical-align:middle; width:100%;">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Mekan Adı</th>
                    <th>E-posta</th>
                    <th>Telefon No</th>
                    <th>Harita Bilgisi</th>
                    <th>İşlemler</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
<div class="card-body">
</div><!--end TraceOfLove Table-->

<div class="modal fade" id="traceOfLoveModal" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="traceOfLoveModalLabel" aria-hidden="true">
    <div class="modal-dialog modal_style" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title m-0" id="traceOfLoveModalLabel">Sevgi İzi Ekle / Güncelle</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" onclick="reload();" aria-label="Close"></button>
            </div><!--end modal-header-->
            <div class="modal-body">
                <form id="traceOfLoveAddOrUpdate-form">
                    <input type="hidden" value="0" id="AddOrUpdateId" name="AddOrUpdateId" />
                    <div class="mb-3 row">
                        <label for="mekanAdi" class="modal-label-style col-sm-3 form-label align-self-center mb-lg-0">Mekan Adı</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control modal-input-style" id="mekanAdi" placeholder="Mekan Adı">
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label for="eposta" class="modal-label-style col-sm-3 form-label align-self-center mb-lg-0">E-posta</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control modal-input-style" id="eposta" placeholder="E-posta">
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label for="tel" class="modal-label-style col-sm-3 form-label align-self-center mb-lg-0">Telefon</label>
                        <div class="col-sm-9">
                            <input type="tel" class="form-control modal-input-style" id="tel" placeholder="(XXX)XXX-XXXX" onkeypress="return isNumberKey(event)">
                        </div>
                    </div>
                     <div class="mb-3 row">
                        <label for="lat" class="modal-label-style col-sm-3 form-label align-self-center mb-lg-0">Lat</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control modal-input-style" id="lat" >
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label for="lng" class="modal-label-style col-sm-3 form-label align-self-center mb-lg-0">Lng</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control modal-input-style" id="lng">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success btn-sm" onclick="javascript:getUpdateOrAdd();">TAMAM</button>
                <button type="button" class="btn btn-primary btn-sm" onclick="reload();" data-bs-dismiss="modal">VAZGEÇ</button>
            </div>
        </div>
    </div>
</div><!--end TraceOfLove's Modal-->

<div class="modal fade" id="mapModal" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="mapModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal_style" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title m-0" id="mapModalLabel">Konum Bilgisi</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" onclick="reload();" aria-label="Close"></button>
            </div><!--end modal-header-->
            <div class="modal-body">
                <form id="map-form">
                    <input type="hidden" value="0" id="mapId" name="mapId" />
                    <div class="map" id="map" style="height:600px;"></div>


                </form>
            </div>
           
        </div>
    </div>
</div><!--end Map Modal-->


@section scripts {
    <script type="text/javascript" src="https://api-maps.yandex.ru/2.1/?lang=en_RU&amp;apikey=<788dcc52-1903-474c-96f8-82b437dcc613"></script>

    <script type="text/javascript">

        var traceOfLoveTablo = null;
        $((_$) => {
            showTraceOfLove();
            reload();
        });

        ymaps.ready(showMap);

        var  showMap = (sId) => {

            $('#mapId').val(0);


            $('#mapModal').modal('show');

            var myMap = new ymaps.Map("map", {
                center: [40.69976154407544, 29.888037639972598],
                zoom: 10
            }, {
                searchControlProvider: 'yandex#search'
            })

            $.post('@Url.Action("ShiftMap","TracesOfLove")', { sId: sId }, (d, s) => {
                for (var i = 0; i < d.data.length; i++) {
                    var Lat = d.data[i].Lat;
                    var Lng = d.data[i].Lng;
                    var Place = d.data[i].PlaceName;

                    myGeoObject = new ymaps.GeoObject({
                        geometry: {
                            type: "Point",
                            coordinates: [Lat, Lng]
                        },
                        properties: {
                            iconContent: Place
                        }
                    }, {
                        preset: 'islands#redStretchyIcon'
                    })
                    myMap.geoObjects
                        .add(myGeoObject);
                }


            })

        }

        var showModal = () => {
            $('#mekanAdi').val('');
            $('#eposta').val('');
            $('#tel').val('');
            $('#lat').val('');
            $('#lng').val('');
            $('#AddOrUpdateId').val(0);
           

            $('#traceOfLoveModal').modal('show');
        }

        var reload = () => {
            document.getElementById("traceOfLoveAddOrUpdate-form").reset();
            document.getElementById("map-form").reset();
            $(".map").empty();
        }

        var showTraceOfLove = () => {
            if (traceOfLoveTablo == null)
                traceOfLoveTablo = $('#traceOfLove_table').DataTable({
                    language: { url: '../dil.json' },
                    processing: true,
                    serverSide: true,
                    paging: true,
                    filter: true,
                    scrollCollapse: true,
                    orderMulti: true,
                    order: [[1, "asc"]],
                    ajax: {
                        url: '@Url.Action("ShowTraceOfLove", "TracesOfLove")',
                        type: "POST",
                        datatype: "json"
                    },
                    createdRow: function (row, data, dataIndex) {
                    },
                    columnDefs: [{ "defaultContent": "-", "targets": "_all" }],
                    columns: [
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.Id;
                            }, "name": "Id"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.PlaceName;
                            }, "name": "PlaceName",
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.Email;
                            }, "name": "Email"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.Phone;
                            }, "name": "Phone"
                        },
                        {
                            "className": "table_style",
                            "render": function (data, type, row) {
                                return `<button type="button" class="btn btn btn-outline-dark pt-2" onclick="javascript: showMap(${row.Id});"><i class="dripicons-document-edit"></i></button>`;
                            }, "name": "Id"
                        },
                        {
                            "className": "table_style",
                            "render": function (data, type, row) {
                                return `<button type="button" class="btn btn btn-outline-dark pt-2" onclick="javascript:getsetModal(${row.Id})"><i class="dripicons-document-edit"></i></button>

                                                               <button type="button"  class="btn btn btn-outline-dark pt-2" onclick="javascript:deleteTraceOfLove(${row.Id})"><i class="dripicons-trash"></i></button>`;

                            }, "name": "RowId", "name": "RowId"
                        },
                    ],
                    fixedColumns: true,
                    scrollCollapse: true,
                    initComplete: function (settings, json) {
                        $('#traceOfLove_table_filter input').unbind();
                        $('#traceOfLove_table_filter input').bind('keyup', function (e) {
                            if (e.keyCode == 13) {
                                traceOfLoveTablo.search(this.value).draw();
                            }
                        });

                        $('.dataTables_scrollBody').removeAttr('style').css({
                            'position': 'relative',
                            'overflow-y': 'auto',
                            'overflow-x': 'auto',
                            'width': '100%',
                            'max-height': ((window.innerHeight / 2) + 120) + 'px'
                        });

                    }

                })
        }

        var getUpdateOrAdd = () => {

            if (document.getElementById("AddOrUpdateId").value > 0) {
                javascript: updateTraceOfLove();
            }
            else {
                javascript: addTraceOfLove();
            }
        }

        var addTraceOfLove = () => {

            var PlaceNameControl = $('[id = "mekanAdi"]').val();
            var EpostaControl = $('[id ="eposta"]').val();
            var PhoneControl = $('[id ="tel"]').val();
            var LatControl = $('[id ="lat"]').val();
            var LngControl = $('[id ="lng"]').val();


            if (!PlaceNameControl || !LatControl || !LngControl) {
                Swal.fire(
                    'Ekleme başarısız!',
                    'Lütfen Mekan Adı / Lat / Lng bilgisini giriniz.',
                    'warning'
                )
                return;
            }
            var formData = new FormData();
            formData.append('PlaceName', PlaceNameControl);
            formData.append('Email', EpostaControl);
            formData.append('Phone', PhoneControl);
            formData.append('Lat', LatControl);
            formData.append('Lng', LngControl);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AddTraceOfLove","TracesOfLove")',
                data: formData,
                async: true,
                contentType: false,
                processData: false,
                success: data => {

                    if (data.Status == true) {

                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Ekleme işlemi başarıyla gerçekleşti.'
                        })
                        document.getElementById("traceOfLoveAddOrUpdate-form").reset();

                        $('#traceOfLoveModal').modal('hide');

                        if (traceOfLoveTablo != null)
                            traceOfLoveTablo.ajax.reload();
                    }
                    else {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Ekleme işlemi gerçekleşemedi.'
                        })
                    }
                    $('#traceOfLoveModal').modal('hide');
                },
            });
        }

        var getsetModal = (sId) => {

            $('#AddOrUpdateId').val("");
            $.getJSON('@Url.Action("GetTraceOfLove", "TracesOfLove")', { sId: sId }, (d, s) => {
                if (s === 'success') {
                    $('#mekanAdi').val(d.data.PlaceName);
                    $('#eposta').val(d.data.Email);
                    $('#tel').val(d.data.Phone);
                    $('#lat').val(d.data.Lat);
                    $('#lng').val(d.data.Lng);

                    $('#AddOrUpdateId').val(d.data.Id);
                    $('#traceOfLoveModal').modal('show');
                }
            })
        }

        var updateTraceOfLove = () => {

            var Id = document.getElementById("AddOrUpdateId").value;
            var Name = document.getElementById("mekanAdi").value;
            var Email = document.getElementById("eposta").value;
            var Phone = document.getElementById("tel").value;
            var Lat = document.getElementById("lat").value;
            var Lng = document.getElementById("lng").value;


            if (!Name || !Lat || !Lng) {
                Swal.fire(
                    'Güncelleme başarısız!',
                    'Lütfen Mekan Adı / Lat / Lng bilgisini giriniz.',
                    'warning'
                )
                return;
            }
            var formData = new FormData(document.getElementById('traceOfLoveAddOrUpdate-form'));
            formData.append('Id', Id);
            formData.append('PlaceName', Name);
            formData.append('Email', Email);
            formData.append('Phone', Phone);
            formData.append('Lat', Lat);
            formData.append('Lng', Lng);

            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateTraceOfLove","TracesOfLove")',
                data: formData,
                processData: false,
                contentType: false,
                cache: false,
                success: function (d) {
                    if (d.Status == true) {
                        console.log('Gelen -> ', d);

                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Güncelleme işlemi başarıyla gerçekleşti.'
                        })
                        if (traceOfLoveTablo != null)
                            traceOfLoveTablo.ajax.reload();
                    }
                    else {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Güncelleme işlemi gerçekleşemedi.'
                        })
                    }
                },
            });
            if (traceOfLoveTablo != null)
                traceOfLoveTablo.ajax.reload();

            $('#traceOfLoveModal').modal('hide');
        }

        var deleteTraceOfLove = (delId) => {
            Swal.fire({
                title: 'Silmek istediğinize emin misiniz?',
                icon: 'question',
                showCancelButton: true,
                cancelButtonText: 'Hayır',
                confirmButtonColor: '#4a804d',
                cancelButtonColor: '#b22222',
                confirmButtonText: 'Evet'
            })
                .then((result) => {

                    if (result.value == true) {
                        $.getJSON('@Url.Action("DeleteTraceOfLove","TracesOfLove")', { pr: delId }, (d, s) => {
                            if (s === "success") {

                                if (d.Status == true) {
                                    traceOfLoveTablo.ajax.reload();
                                    const Toast = Swal.mixin({
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000,
                                        timerProgressBar: true,
                                        didOpen: (toast) => {
                                            toast.addEventListener('mouseenter', Swal.stopTimer)
                                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                                        }
                                    })

                                    Toast.fire({
                                        icon: 'success',
                                        title: 'Silme işlemi başarıyla gerçekleşti.'
                                    })
                                } else {
                                    const Toast = Swal.mixin({
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000,
                                        timerProgressBar: true,
                                        didOpen: (toast) => {
                                            toast.addEventListener('mouseenter', Swal.stopTimer)
                                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                                        }
                                    })

                                    Toast.fire({
                                        icon: 'success',
                                        title: 'Ekleme işlemi gerçekleşemedi.'
                                    })
                                }
                            }
                            if (traceOfLoveTablo != null)
                                traceOfLoveTablo.ajax.reload();
                        });

                    }
                });
        }

        function isNumberKey(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;
            return true;
        }

        function phoneMask() {
            var txt = $(this).val().replace(/\D/g, '');
            let newtxt = '';
            for (let i = 0; i < Math.min(txt.length, 10); i++) {
                newtxt += txt[i];
                if ((i == 2) || (i == 5)) {
                    newtxt += ' ';
                }
            }
            if (newtxt[newtxt.length - 1] == ' ') newtxt = newtxt.substring(0, newtxt.length - 1);
            this.value = newtxt;

        }
        $('[type="tel"]').keyup(phoneMask);
    </script>
    }