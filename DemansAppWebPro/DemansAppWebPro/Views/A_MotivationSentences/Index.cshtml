﻿@{
    ViewData["Title"] = "MotivationSentences";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section css{
    <link href="~/plugins/timepicker/bootstrap-material-datetimepicker.css" rel="stylesheet" />
    <style type="text/css">
        .table_style {
            overflow: auto;
            max-width: 150px;
            text-align: center;
        }

        .table_style {
            text-align: center !important
        }

        div.dataTables_wrapper div.dataTables_length select {
            width: 50px !important;
        }

        div.dataTables_wrapper div.dataTables_length label {
            margin-left: 10px !important;
            margin-top: 13px !important;
        }

        div.dataTables_wrapper div.dataTables_info {
            margin-left: 10px !important;
        }

        div.dataTables_wrapper div.dataTables_filter input {
            margin-right: 10px !important;
            margin-top: 13px !important;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 2px !important
        }

        div.dataTables_wrapper div.dataTables_paginate {
            margin-right: 10px !important
        }

        .modal-input-style {
            margin-left: 10px !important;
        }

        .modal-label-style {
            padding-left: 20px !important;
        }

        .textarea-style {
            width: 71% !important;
            margin-left: 18px !important;
        }

        .label-style {
            padding-left: 20px !important;
            padding-top: 6px !important;
        }

        .checkbox {
            padding-left: 20px !important;
        }

        .dropdown-style {
            height: 35px !important;
            border-radius: 7px !important;
            border-color: darkgrey;
        }

        label {
            font-size: 14px !important;
            color: #303e67 !important;
            font-weight: 600 !important;
        }

        .date-style {
            margin-left: -6px !important;
        }

    </style>
}

<div class="card">
    <div class="card-header">
        <div class="row text-center">
            <h3 class="page-title col-sm-10">Motivasyon Cümleleri</h3>
            <button type="button" class="btn btn btn-outline-dark col-sm-2 align-self-end" data-bs-toggle="modal" onclick="javascripts: showModal();">Motivasyon Cümlesi Ekle</button>
        </div>
    </div>
</div>
<div class="card">
    <div class="table-responsive">
        <table id="motivation_sentences_table" class="table table-striped table-bordered dt-responsive nowrap" style="vertical-align:middle; width:100%;">
            <thead>
                <tr>
                    <th class="table-style">Id</th>
                    <th class="table-style">Cümle Konusu</th>
                    <th class="table-style">Cümle</th>
                    <th class="table-style">Düzenle/Sil</th>
                    <th class="table-style">Kullanıcılar</th>
                    <th class="table-style">Kullanıcı Ekle</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
<div class="card-body">
</div><!--end MotivationSentences Table-->
<div class="modal fade" id="sentenceModal" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="sentenceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal_style" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title m-0" id="sentenceModalLabel">Cümle Ekle / Güncelle</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" onclick="reload();" aria-label="Close"></button>
            </div><!--end modal-header-->
            <div class="modal-body">
                <form id="sentenceAddOrUpdate-form">
                    <input type="hidden" value="0" id="AddOrUpdateId" name="AddOrUpdateId" />

                    <div class="mb-3 row">
                        <label for="cumleKonusu" class="modal-label-style col-sm-3 form-label align-self-center mb-lg-0 ">Cümle Konusu</label>
                        <div class="col-sm-9">
                            <input type="text" class="form-control modal-input-style" id="cumleKonusu" placeholder="Cümle Konusu">
                        </div>
                    </div>
                    <div class="mb-3 row">

                        <label class="col-sm-3 label-style" for="cumle">Motivasyon Cümlesi</label>
                        <textarea type="text" class="form-control col-sm-9 textarea-style" id="cumle" name="cumle" maxlength="200" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success btn-sm" onclick="javascript:getUpdateOrAdd();">TAMAM</button>
                <button type="button" class="btn btn-primary btn-sm" onclick="reload();" data-bs-dismiss="modal">VAZGEÇ</button>
            </div>
        </div>
    </div>
</div><!--end MotivationSentence's Modal-->

<div class="modal fade" id="usersModal" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="usersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal_style" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title m-0" id="usersModalLabel">Erişim Sağlayan Kullanıcılar</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" onclick="document.location.reload(true);" aria-label="Close"></button>
            </div><!--end modal-header-->
            <div class="modal-body">
                <form id="users-form">
                    <input type="hidden" value="0" id="userId" name="userId" />
                    <div class="card">
                        <div class="table-responsive">
                            <table id="users_table" class="table table-striped table-bordered dt-responsive nowrap" style="vertical-align:middle; width:100%;">
                                <thead>
                                    <tr>
                                        <th class="table-style">Ad Soyad</th>
                                        <th class="table-style">Kullanıcı Çıkar</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-sm" onclick="document.location.reload(true);" data-bs-dismiss="modal">TAMAM</button>
            </div>
        </div>
    </div>
</div><!--end users Modal-->

<div class="modal fade" id="addUserModal" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal_style" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title m-0" id="addUserModalLabel">Kullanıcı Ekle / Çıkar</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" onclick="reload();" aria-label="Close"></button>
            </div><!--end modal-header-->
            <div class="modal-body">
                <form id="userupdate-form">
                    <input type="hidden" value="0" id="userupdateId" name="userupdateId" />

                    <div class="mb-3 row">
                        <label class="col-sm-3 form-label text-start" for="usersmultiple"><b>Kullanıcılar </b><span class="text-danger">*</span></label>
                        <select class="col-md-8 multiple-select debts" multiple="multiple" id="usersmultiple" name="usersmultiple"></select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success btn-sm" onclick="javascript:addUser();">TAMAM</button>
                <button type="button" class="btn btn-primary btn-sm" onclick="reload();" data-bs-dismiss="modal">VAZGEÇ</button>
            </div>
        </div>
    </div>
</div><!--end usersUpdate Modal-->
@section scripts {
    <script src="~/plugins/timepicker/bootstrap-material-datetimepicker.js"></script>
    <script type="text/javascript">

        var motivationSentencesTable = null;
        var userTablo = null;


        $((_$) => {
            showMotivationSentences();
            reload();
            $('#usersmultiple').select2({ dropdownParent: $('#addUserModal'), width: '100%', placeholder: "Seçiniz..." });
        });

        var showModal = () => {
            $('#cumleKonusu').val('');
            $('#cumle').val('');

            $('#AddOrUpdateId').val('');

            $('#sentenceModal').modal('show');
        }

        var reload = () => {
            document.getElementById("sentenceAddOrUpdate-form").reset();
        }

        var showMotivationSentences = () => {
            if (motivationSentencesTable == null)
                motivationSentencesTable = $('#motivation_sentences_table').DataTable({
                    language: { url: '../dil.json' },
                    processing: true,
                    serverSide: true,
                    paging: true,
                    filter: true,
                    scrollCollapse: true,
                    orderMulti: true,
                    order: [[1, "asc"]],
                    ajax: {
                        url: '@Url.Action("ShowMotivationSentences", "A_MotivationSentences")',
                        type: "POST",
                        datatype: "json"
                    },
                    createdRow: function (row, data, dataIndex) {
                    },
                    columnDefs: [{ "defaultContent": "-", "targets": "_all" }],
                    columns: [
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.Id;
                            }, "name": "Id"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.Name;
                            }, "name": "Name"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.Text;
                            }, "name": "Text",
                        },
                        {
                            "className": "table_style",
                            "render": function (data, type, row) {
                                return `<button type="button" class="btn btn btn-outline-dark pt-2" onclick="javascript:getsetModal(${row.Id})"><i class="dripicons-document-edit"></i></button>
                                        <button type="button" class="btn btn btn-outline-dark pt-2" onclick="javascript:deleteSentence(${row.Id})"><i class="dripicons-trash"></i></button>`;
                            }, "name": "Id", "name": "Id"
                        },
                        {
                            "className": "table_style",
                            "render": function (data, type, row) {
                                return `<button type="button" class="btn btn btn-outline-dark pt-2" onclick="javascript: showUsersModal(${row.Id});"><i class="dripicons-user"></i></button>`;
                            }, "name": "Id"
                        },
                        {
                            "className": "table_style",
                            "render": function (data, type, row) {
                                return `<button type="button" class="btn btn btn-outline-dark pt-2" onclick="javascript: showaddUserModal(${row.Id});"><i class="dripicons-document-edit"></i></button>`;
                            }, "name": "Id", "name": "Id"
                        },
                    ],
                    fixedColumns: true,
                    scrollCollapse: true,
                    initComplete: function (settings, json) {
                        $('#motivation_sentences_table_filter input').unbind();
                        $('#motivation_sentences_table_filter input').bind('keyup', function (e) {
                            if (e.keyCode == 13) {
                                motivationSentencesTable.search(this.value).draw();
                            }
                        });

                        $('.dataTables_scrollBody').removeAttr('style').css({
                            'position': 'relative',
                            'overflow-y': 'auto',
                            'overflow-x': 'auto',
                            'width': '100%',
                            'max-height': ((window.innerHeight / 2) + 120) + 'px'
                        });

                    }

                })
        }

        var getUpdateOrAdd = () => {

            if (document.getElementById("AddOrUpdateId").value > 0) {
                javascript: updateSentence();
            }
            else {
                javascript: addSentence();
            }
        }

        var addSentence = () => {

            var NameControl = $('[id = "cumleKonusu"]').val();
            var TextControl = $('[id = "cumle"]').val();

            if (!NameControl || !TextControl) {
                Command: toastr["warning"]("Lütfen Cümle Konusu / Cümle bilgisini giriniz.", "Ekleme başarısız!")
                toastr.options = {
                    "closeButton": true,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "8000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
                return;
            }

            var formData = new FormData();
            formData.append('Name', NameControl);
            formData.append('Text', TextControl);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AddSentence","A_MotivationSentences")',
                data: formData,
                async: true,
                contentType: false,
                processData: false,
                success: data => {

                    if (data.Status == true) {

                        Command: toastr["success"]("Ekleme işlemi başarıyla gerçekleşti.")

                        toastr.options = {
                            "closeButton": false,
                            "debug": false,
                            "newestOnTop": false,
                            "progressBar": false,
                            "positionClass": "toast-top-right",
                            "preventDuplicates": false,
                            "onclick": null,
                            "showDuration": "300",
                            "hideDuration": "1000",
                            "timeOut": "8000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        }
                        document.getElementById("sentenceAddOrUpdate-form").reset();

                        $('#sentenceModal').modal('hide');

                        if (motivationSentencesTable != null)
                            motivationSentencesTable.ajax.reload();
                    }
                    else {
                        Command: toastr["error"]("Ekleme işlemi gerçekleşemedi.'")

                        toastr.options = {
                            "closeButton": false,
                            "debug": false,
                            "newestOnTop": false,
                            "progressBar": false,
                            "positionClass": "toast-top-right",
                            "preventDuplicates": false,
                            "onclick": null,
                            "showDuration": "300",
                            "hideDuration": "1000",
                            "timeOut": "8000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        }
                    }
                    $('#sentenceModal').modal('hide');
                },
            });
        }

        var getsetModal = (sId) => {

            $('#AddOrUpdateId').val("");
            $.getJSON('@Url.Action("GetSentence", "A_MotivationSentences")', { sId: sId }, (d, s) => {
                if (s === 'success') {
                    $('#cumleKonusu').val(d.data.Name);
                    $('#cumle').val(d.data.Text);
                    $('#AddOrUpdateId').val(d.data.Id);
                    $('#sentenceModal').modal('show');
                }
            })
        }

        var updateSentence = () => {

            var Id = document.getElementById("AddOrUpdateId").value;
            var Name = document.getElementById("cumleKonusu").value;
            var Text = document.getElementById("cumle").value;

            if (!Name || !Text) {
                Command: toastr["warning"]("Lütfen Cümle Konusu / Cümle bilgisini giriniz.", "Ekleme başarısız!")
                toastr.options = {
                    "closeButton": true,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "8000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
                return;
            }
            var formData = new FormData(document.getElementById('sentenceAddOrUpdate-form'));
            formData.append('Id', Id);
            formData.append('Name', Name);
            formData.append('Text', Text);


            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateSentence","A_MotivationSentences")',
                data: formData,
                processData: false,
                contentType: false,
                cache: false,
                success: function (d) {
                    if (d.Status == true) {
                        console.log('Gelen -> ', d);

                        Command: toastr["success"]("Güncelleme işlemi başarıyla gerçekleşti.")

                        toastr.options = {
                            "closeButton": false,
                            "debug": false,
                            "newestOnTop": false,
                            "progressBar": false,
                            "positionClass": "toast-top-right",
                            "preventDuplicates": false,
                            "onclick": null,
                            "showDuration": "300",
                            "hideDuration": "1000",
                            "timeOut": "8000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        }
                        if (motivationSentencesTable != null)
                            motivationSentencesTable.ajax.reload();
                    }
                    else {
                        Command: toastr["error"]("Güncelleme işlemi gerçekleşemedi.'")

                        toastr.options = {
                            "closeButton": false,
                            "debug": false,
                            "newestOnTop": false,
                            "progressBar": false,
                            "positionClass": "toast-top-right",
                            "preventDuplicates": false,
                            "onclick": null,
                            "showDuration": "300",
                            "hideDuration": "1000",
                            "timeOut": "8000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        }
                    }
                },
            });
            if (motivationSentencesTable != null)
                motivationSentencesTable.ajax.reload();

            $('#sentenceModal').modal('hide');
        }

        var deleteSentence = (delId) => {
            Swal.fire({
                title: 'Silmek istediğinize emin misiniz?',
                icon: 'question',
                showCancelButton: true,
                cancelButtonText: 'Hayır',
                confirmButtonColor: '#4a804d',
                cancelButtonColor: '#b22222',
                confirmButtonText: 'Evet'
            })
                .then((result) => {

                    if (result.value == true) {
                        $.getJSON('@Url.Action("DeleteSentence","A_MotivationSentences")', { pr: delId }, (d, s) => {
                            if (s === "success") {

                                if (d.Status == true) {
                                    motivationSentencesTable.ajax.reload();
                                    Command: toastr["success"]("Silme işlemi gerçekleşti.")

                                    toastr.options = {
                                        "closeButton": false,
                                        "debug": false,
                                        "newestOnTop": false,
                                        "progressBar": false,
                                        "positionClass": "toast-top-right",
                                        "preventDuplicates": false,
                                        "onclick": null,
                                        "showDuration": "300",
                                        "hideDuration": "1000",
                                        "timeOut": "8000",
                                        "extendedTimeOut": "1000",
                                        "showEasing": "swing",
                                        "hideEasing": "linear",
                                        "showMethod": "fadeIn",
                                        "hideMethod": "fadeOut"
                                    }
                                } else {
                                    Command: toastr["error"]("Silme işlemi gerçekleşemedi.")

                                    toastr.options = {
                                        "closeButton": false,
                                        "debug": false,
                                        "newestOnTop": false,
                                        "progressBar": false,
                                        "positionClass": "toast-top-right",
                                        "preventDuplicates": false,
                                        "onclick": null,
                                        "showDuration": "300",
                                        "hideDuration": "1000",
                                        "timeOut": "8000",
                                        "extendedTimeOut": "1000",
                                        "showEasing": "swing",
                                        "hideEasing": "linear",
                                        "showMethod": "fadeIn",
                                        "hideMethod": "fadeOut"
                                    }
                                }
                            }
                            if (motivationSentencesTable != null)
                                motivationSentencesTable.ajax.reload();
                        });
                    }
                });
        }

        var showUsersModal = (sId) => {

            $('#usersModal').modal('show');
            $('#userId').val(sId);
            showUsers(sId);
        }

        var showUsers = (sId) => {
            if (userTablo != null) userTablo = null;


            if (userTablo == null)
                userTablo = $('#users_table').DataTable({
                    language: { url: '../dil.json' },
                    processing: true,
                    serverSide: true,
                    paging: true,
                    filter: true,
                    scrollCollapse: true,
                    orderMulti: true,
                    order: [[0, "desc"]],
                    ajax: {
                        url: '@Url.Action("ShowUsers", "A_MotivationSentences")',
                        type: "POST",
                        datatype: "json",
                        data: function (d) {
                            d.sId = sId
                        },
                    },
                    createdRow: function (row, data, dataIndex) {
                    },
                    columnDefs: [{ "defaultContent": "-", "targets": "_all" }],
                    columns: [
                        {
                            "render": (data, type, row) => {
                                var adSoyad = row.UserName + ' ' + row.Surname;
                                return adSoyad;
                            }, "name": "UserName", "name": "Surname"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return `<button type="button" class="btn btn btn-outline-dark pt-2" onclick="javascript: deleteUser(${row.Id});"><i class="dripicons-exit"></i></button>`;

                            }, "name": "Id"
                        },
                    ],
                    fixedColumns: true,
                    scrollCollapse: true,
                    initComplete: function (settings, json) {
                        $('#userTablo_filter input').unbind();
                        $('#userTablo_filter input').bind('keyup', function (e) {
                            if (e.keyCode == 13) {
                                userTablo.search(this.value).draw();
                            }
                        });

                        $('.dataTables_scrollBody').removeAttr('style').css({
                            'position': 'relative',
                            'overflow-y': 'auto',
                            'overflow-x': 'auto',
                            'width': '100%',
                            'max-height': ((window.innerHeight / 2) + 120) + 'px'
                        });

                    }


                });



        }

        var showaddUserModal = (sId) => {
            $('#userupdateId').val(sId);
            getSelect(sId);
            $('#addUserModal').modal('show');
        }

        var getSelect = (sId) => {
            $.getJSON('@Url.Action("GetSelect", "A_MotivationSentences")', { sId: sId }, (d, s) => {
                if (s === "success") {

                    if (d.Data == null && d.data.length > 0) {
                        $('#usersmultiple').empty();
                        $('#usersmultiple').append(`<option value="0" disabled >Lütfen Kullanıcı Seçiniz...</option>`);
                        for (let item of d.data) {
                            var nameSurname = item.UserName + ' ' + item.Surname;
                            $('#usersmultiple').append(`<option value="${item.Id}">${nameSurname}</option>`);
                        }

                        $("#usersmultiple").append(s);
                        $("#usersmultiple").val(d.selected);
                    }
                }

            })
        }

        var addUser = () => {

            var sentenceId = $('#userupdateId').val();
            var userIdmultiple = $('#usersmultiple').val();

            $.post('@Url.Action("AddUser","A_MotivationSentences")', { sentenceId: sentenceId, userIds: userIdmultiple }, (d, s) => {
                if (s === "success") {
                    if (d.Status == true) {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Ekleme işlemi başarıyla gerçekleşti.'
                        })

                    }
                    else {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Ekleme işlemi gerçekleşemedi.'
                        })
                    }
                }
            });

            $('#addUserModal').modal('hide');

        }

        var deleteUser = (delId) => {

            var sentenceId = $('#userId').val();

            Swal.fire({
                title: 'Çıkarmak istediğinize emin misiniz?',
                icon: 'question',
                showCancelButton: true,
                cancelButtonText: 'Hayır',
                confirmButtonColor: '#4a804d',
                cancelButtonColor: '#b22222',
                confirmButtonText: 'Evet'
            })
                .then((result) => {
                    if (result.value == true) {
                        $.getJSON('@Url.Action("DeleteUser","A_MotivationSentences")', { pr: delId, sentenceId: sentenceId }, (d, s) => {
                            if (s === "success") {
                                if (d.Status == true) {
                                    userTablo.ajax.reload();

                                    const Toast = Swal.mixin({
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000,
                                        timerProgressBar: true,
                                        didOpen: (toast) => {
                                            toast.addEventListener('mouseenter', Swal.stopTimer)
                                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                                        }
                                    })

                                    Toast.fire({
                                        icon: 'success',
                                        title: 'Çıkarma işlemi başarıyla gerçekleşti.'
                                    })
                                } else {
                                    const Toast = Swal.mixin({
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000,
                                        timerProgressBar: true,
                                        didOpen: (toast) => {
                                            toast.addEventListener('mouseenter', Swal.stopTimer)
                                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                                        }
                                    })

                                    Toast.fire({
                                        icon: 'success',
                                        title: 'Çıkarma işlemi gerçekleşemedi.'
                                    })
                                }
                            }
                            if (userTablo != null)
                                userTablo.ajax.reload();
                        });
                    }
                });
        }


    </script>
    }