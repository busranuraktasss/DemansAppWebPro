@model DemansAppWebPro.Models.Users
@{
    ViewData["UserId"] = Model.Id;
    ViewData["Title"] = "AudioBooks";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}
@section css{
    <style type="text/css">
        .table_style {
            overflow: auto;
            max-width: 150px;
            text-align: center;
        }

        .table_style {
            text-align: center !important
        }

        div.dataTables_wrapper div.dataTables_length select {
            width: 50px !important;
        }

        div.dataTables_wrapper div.dataTables_length label {
            margin-left: 10px !important;
            margin-top: 13px !important;
        }

        div.dataTables_wrapper div.dataTables_info {
            margin-left: 10px !important;
        }

        div.dataTables_wrapper div.dataTables_filter input {
            margin-right: 10px !important;
            margin-top: 13px !important;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 2px !important
        }

        div.dataTables_wrapper div.dataTables_paginate {
            margin-right: 10px !important
        }

        .modal-input-style {
            margin-left: 10px !important;
        }

        .modal-label-style {
            padding-left: 20px !important;
        }

        @@media (min-width: 1400px) {
            .container, .container-sm, .container-md, .container-lg, .container-xl, .container-xxl {
                max-width: 1450px;
            }
        }

        .container {
            padding-top: 40px !important;
        }
    </style>
}

<div class="container">
    <div class="row">

        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Sesli Kitaplar</h4>
            </div><!--end card-header-->
            <div class="card-body">
                <div class="card">
                    <div class="table-responsive">
                        <table id="audio_book_table" class="table table-striped table-bordered dt-responsive nowrap" style="vertical-align:middle; width:100%;">
                            <thead>
                                <tr>
                                    <th class="table-style">Ad</th>
                                    <th class="table-style">Konusu</th>
                                    <th class="table-style">Text</th>
                                    <th class="table-style">Url</th>
                                    <th class="table-style">Durumu</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div><!--end card-body-->
        </div><!--end card-->


    </div>
</div>

@*<div class="card">
    <div class="card-header">
        <div class="row text-center">
            <h3 class="page-title col-sm-10">Sesli Kitaplar</h3>
        </div>
    </div>
</div>
<div class="card">
    <div class="table-responsive">
        <table id="audio_book_table" class="table table-striped table-bordered dt-responsive nowrap" style="vertical-align:middle; width:100%;">
            <thead>
                <tr>
                    <th class="table-style">Ad</th>
                    <th class="table-style">Konusu</th>
                    <th class="table-style">Text</th>
                    <th class="table-style">Url</th>
                    <th class="table-style">Durumu</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
<div class="card-body">
</div><!--end AudioBooks Table-->*@



@section scripts {

    <script type="text/javascript">

        var audioBookTablo = null;
        $((_$) => {
            showAudioBooks();
        });

        var showAudioBooks = () => {
            if (audioBookTablo == null)
                audioBookTablo = $('#audio_book_table').DataTable({
                    language: { url: '../dil.json' },
                    processing: true,
                    serverSide: true,
                    paging: true,
                    filter: true,
                    scrollCollapse: true,
                    orderMulti: true,
                    order: [[1, "asc"]],
                    ajax: {
                        url: '@Url.Action("ShowAudioBooks", "U_AudioBooks")',
                        type: "POST",
                        datatype: "json",
                        data: function(d){
                            d.userId = @Model.Id;
                        }
                    },
                    createdRow: function (row, data, dataIndex) {
                    },
                    columnDefs: [{ "defaultContent": "-", "targets": "_all" }],
                    columns: [
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                console.log(row);
                                return row.name;
                            }, "name": "name",
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.subject;
                            }, "name": "subject"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.text;
                            }, "name": "text"
                        },
                        {
                            "className": "table_style",
                            "render": (data, type, row) => {
                                return row.url;
                            }, "name": "url"
                        },

                        //Sesli Kitap Durum
                        {
                            "className": "table_style",
                            "render": function (data, type, row) {
                                let check = row.status == 1 ? 'checked' : 'nchecked';
                                return `<div class="form-check form-switch form-switch-warning" style="pading-left:70px;">
                                                                        <input class="form-check-input" type="checkbox" id="checked_${row.id}" onclick="javascript: checkAudioBook(${row.id})" ${check}>
                                                                </div>`;
                            }, "name": "status"
                        },
                    ],
                    fixedColumns: true,
                    scrollCollapse: true,
                    initComplete: function (settings, json) {
                        $('#audio_book_table_filter input').unbind();
                        $('#audio_book_table_filter input').bind('keyup', function (e) {
                            if (e.keyCode == 13) {
                                audioBookTablo.search(this.value).draw();
                            }
                        });

                        $('.dataTables_scrollBody').removeAttr('style').css({
                            'position': 'relative',
                            'overflow-y': 'auto',
                            'overflow-x': 'auto',
                            'width': '100%',
                            'max-height': ((window.innerHeight / 2) + 120) + 'px'
                        });

                    }

                })
        }

        var checkAudioBook = (checkId) => {
            $.post('@Url.Action("CheckAudioBook","U_AudioBooks")', { request: checkId }, (d, s) => {

                if (s == 'success') {
                    if (audioBookTablo != null)
                        audioBookTablo.ajax.reload();

                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'success',
                        title: 'Durum değiştirildi.'
                    })
                }
                else {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'success',
                        title: 'Durum değiştirilemedi.'
                    })
                }
            });
        }
    </script>
    }